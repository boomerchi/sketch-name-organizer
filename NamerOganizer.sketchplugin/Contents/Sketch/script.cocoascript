// -------------------------------
// 00 sortArtboards
// -------------------------------

var sortArtboards = function (context) {
	var doc           = context.document;
	var artboards     = Array();
	var pageArtboards = doc.currentPage().artboards();

	for (var i = 0; i < pageArtboards.count(); i++) {
		artboards[i] = pageArtboards[i];
	}

	artboards.sort(function (a, b) { return a.frame().x() - b.frame().x();});
	artboards.sort(function (a, b) { return a.frame().y() - b.frame().y();});

	for (var i = 0; i < pageArtboards.count(); i++) {
		var oldName = artboards[i].name().toString();
		oldName     = removeNum(oldName)
		oldName = rename(oldName)
		var number  = (i <= 8) ? '0' + (i + 1).toString() : (i + 1).toString();
		var name    = number + ':' + oldName;
		artboards[i].setName(name);
	}
	sortAll(context)
	// Success message
	[doc showMessage:'renameArtboards: ' + i + ' Artboards Done']

};

// -------------------------------
// 01 removeNumber
// -------------------------------

var removeNumber = function (context) {
	sortArtboards(context)

	var doc           = context.document;
	var pageArtboards = doc.currentPage().artboards();

	for (var i = 0; i < pageArtboards.count(); i++) {
		var oldName = pageArtboards[i].name().toString();
		pageArtboards[i].setName(removeNum(oldName));
	}
	// Success message
	[doc showMessage:'removeNumber: ' + i + ' Artboards Done']
}

// -------------------------------
// 02 renameLayers
// -------------------------------

var renameAll = function(context) {
	var doc = context.document;
	var pages = doc.pages();

	for (var i = 0; i < pages.count(); i++) {
		renameInstanceRecursive(pages.objectAtIndex(i));
	}
	renameStyleLayer(context)

	doc.showMessage("Rename Done!");
};

var renameStyleLayer = function(context) {
	var document = context.document;
	var pages = [document pages];
	var pages_loop = [pages objectEnumerator];

	while (page = [pages_loop nextObject]) {
		var artboards = [page artboards];
		var artboards_loop = [artboards objectEnumerator];
		while (artboard = [artboards_loop nextObject]) {
			renameTextLayers([artboard layers], document);
			renameOtherLayers([artboard layers], document);
		}
	}
};

// -------------------------------
// Extra Function
// -------------------------------

function rename(layerName) {
	var name = layerName.split(' ');
	name = upperCase(name).join('').replace(/ /g,"").split('/');
	return upperCase(name).join(' / ')
}

function upperCase(name) {
	for (var i = 0, newArr = [], sumArr = []; i < name.length; i++) {
		var news = name[i][0].toUpperCase();
		newArr.push(news);
		var sums = name[i].slice(1);
		sumArr.push(sums);
		name[i] = newArr[i] + sumArr[i];
	}
	return name
}

function removeNum(name) {
	return name.replace(/[0-9]+\:/, '');
}

// sort

function moveObject(array, atIndex, toIndex) {
	if (atIndex != toIndex) {
		var object = [[[array objectAtIndex:atIndex] retain] autorelease]

		[array removeObjectAtIndex:atIndex]
		[array insertObject:object atIndex:toIndex]
	}

	return array
}


function sendActionTimes(context, action, object, times) {
	var doc  = context.document
	var page = [doc currentPage]
	var selection = context.selection
	var selectedLayers = [selection mutableCopy]

		[page changeSelectionBySelectingLayers: nil]

	for (var i = 0; i < times; i++) {
		[MSLayerMovement moveBackward: [object]]
	}

	[page changeSelectionBySelectingLayers: selectedLayers]
}


function sortLayers(layers) {
	var sortDescriptor = [NSSortDescriptor sortDescriptorWithKey:'name'
	ascending:false
	selector:'localizedStandardCompare:']

	return [layers sortedArrayUsingDescriptors:[sortDescriptor]]
}

function getSteps(selection, sortedLayers) {
	var steps = []
	var selectedLayers = [selection mutableCopy]

	for (var i = 0; i < [sortedLayers count]; i++) {
		var layer = [sortedLayers objectAtIndex:i]
		var index = [selectedLayers indexOfObject:layer]

		steps.push({ layer: layer, steps: index - i })

		selectedLayers = moveObject(selectedLayers, index, i)
	}

	return steps
}

function getObjectName(selection) {
	var object = [selection firstObject]

	switch ([object class]) {
		case [MSShapeGroup class]:
			return 'layers'
		case [MSArtboardGroup class]:
			return 'artboards'
		default:
			return 'objects'
	}
}

function sortAll(context) {
	var doc        = context.document
	var selection  = doc.currentPage().artboards()

	if ([selection count] > 1) {
		var moveBack = sendActionTimes.bind(null, context, 'moveBackward:')

		getSteps(selection, sortLayers(selection))
			.forEach(function(steps) {
				moveBack(steps.layer, steps.steps)
			})
	}
}

// textStyle

function processTextLayers(layers, callback) {
	for (var i = 0; i < [layers count]; i++) {
		var layer = [layers objectAtIndex:i];

		if (layer.class() == "MSLayerGroup") {
			// Also process child layers/groups
			processTextLayers([layer layers], callback);
		} else if (layer.class() == "MSTextLayer") {
			callback(layer);
		}
	}
};

function renameTextLayers(layers, document) {
	processTextLayers(layers, function(layer) {
		var sharedStyleID = layer.style().sharedObjectID();
		var allStyles = document.documentData().layerTextStyles().objects();

		var styleSearchPredicate = NSPredicate.predicateWithFormat("objectID == %@", sharedStyleID);
		var filteredStyles = allStyles.filteredArrayUsingPredicate(styleSearchPredicate);

		if (filteredStyles.length) {
			layer.setName(rename(filteredStyles[0].name()));
		}
	});
}

function processOtherLayers(layers, callback) {
	for (var i = 0; i < [layers count]; i++) {
		var layer = [layers objectAtIndex:i];

		if (layer.class() == "MSLayerGroup") {
			// Also process child layers/groups
			processOtherLayers([layer layers], callback);
		} else if (layer.class() !== "MSTextLayer") {
			callback(layer);
		}
	}
};

function renameOtherLayers(layers, document) {
	processOtherLayers(layers, function(layer) {
		var sharedStyleID = layer.style().sharedObjectID();
		var allStyles = document.documentData().layerStyles().objects();

		var styleSearchPredicate = NSPredicate.predicateWithFormat("objectID == %@", sharedStyleID);
		var filteredStyles = allStyles.filteredArrayUsingPredicate(styleSearchPredicate);

		if (filteredStyles.length) {
			layer.setName(rename(filteredStyles[0].name()));
		}
	});
}

function renameInstanceRecursive(selected) {
	selected.setName(rename(selected.name().toString()));
	if (selected instanceof MSSymbolInstance && selected.name() != selected.symbolMaster().name().trim()) {
		selected.setName(selected.symbolMaster().name());
		updateCount++;
		return
	}

	try {
		var children = selected.layers();

		for (var i = 0; i < children.length; i++) {
			renameInstanceRecursive(children.objectAtIndex(i));
		}
	} catch(e) { }
};